########################
# logstash Configuration Files - Ossec
#######################

filter {
  mutate {
    add_field => {
      "received_timestamp" => ""
    }
  }
  ruby {
    code => "
      event['received_timestamp'] = Time.now.to_f
    " 
  }

  if [type] == "ossec-alerts" {
    json {
      source => "message"
      add_tag => ["ossec-alerts"]
    }

    mutate {
      add_field => {
        "alert" => "%{[rule][comment]}"
        "alert_sid" => "%{[rule][sidid]}"
      }
    }

    if [dstuser] and [dstuser] != '' {
      mutate {
        add_field => {
          "user" => "%{[dstuser]}"
        }
      }
    } else if [srcuser] and [srcuser] != '' {
        mutate {
          add_field => {
            "user" => "%{[srcuser]}"
          }
        }
    } else {
      mutate {
        add_field => {
          "user" => ""
        }
      }
    }

    #use correct timestamp for default @timsteamp
    grok {
      match => { "full_log" => "%{TIMESTAMP_ISO8601:epoch}" }
    }
    date {
       match => [ "epoch", "ISO8601", "YYYY-MM-dd HH:mm:ss,SSS" ]
    }

    #add a new epoch_time field for AttackTagger
    ruby {
      code => "
        tstamp = event['@timestamp'].to_f
        received_tstamp = event['received_timestamp'].to_f
        event['epoch_time'] = Time.at(tstamp).strftime('%s.%L')
        event['received_timestamp'] = Time.at(received_tstamp).strftime('%s.%L')
      "
    }

    translate {
      field => "alert_sid"
      regex => true
      destination => "alert_translated"
      fallback => "unknown alert"
      dictionary => [
                     "^105900$", "ALERT_NEW_USER",
                     "^5401$", "ALERT_SUDO_BRUTEFORCE",
                     "^510$", "ALERT_NEW_HIDDEN_FILE_TMP_LOCATION",
                     "^105700$", "ALERT_FAILED_PASSWORD",
                     "^5555$", "ALERT_CHANGE_CREDENTIAL",
                     "^5501$", "login",
                     "^100551$", "new_authorized_keys",
                     "^100540$", "ALERT_NEW_SERVICE",
                     "^100538$", "ALARM_MULTIPLE_LOGIN",
                     "^100044$", "read_host_configuration",
                     "^(102900|102901|102902|102903)$", "ALERT_DOWNLOAD_SECURITY_TOOLS",
                     "^(592|1004|100010|100100|100101|100210)$", "ALERT_DISABLE_LOGGING",
                     "^100539$", "ALERT_HOST_JUMP",
                     "^100060$", "ALERT_WEIRD_DIRECTORY_NAME",
                     "^105901$", "ALERT_WEIRD_ACCOUNT_NAME",

                     #New Events
                     "^100070$", "ALERT_COMPILING_CODE",
                     "^105501$", "ALERT_PRIVILEGE_ESCALATION",
                     "^100552$", "ALERT_CHANGING_SYSTEM_FILES",
                     "^100090$", "ALERT_DOWNLOAD_SENSITIVE_EXTENSION",
                     "^100160$", "ALERT_GET_LOGGEDIN_USERS"


                      
                     #"" ,"ALARM_COMMAND_ANOMALY"
                     #"" ,"ALERT_ILLEGAL_USER_ACTIVITY"
                     #"" ,"ALERT_MISMATCH_FILE_HOST_DL"
                     #"" ,"ALERT_HTTP_HOST_CLUSTER_CONN"
                     #"" ,"ALERT_REQUEST_ACCESS_RESOURCE"
                     #"" ,"ALERT_PREVIOUSLY_COMPROMISED"
                     #"" ,"ALERT_LOGIN_USING_EXPIRED_ACCOUNT"
      ]
    }

    #create a duplicate for AttackTagger, send the original to ES/kibana
    clone {
      clones => ["ossec-alerts-clone"]
    }
  }

  if [type] == "ossec-alerts-clone" {
    mutate{
      remove_tag => ["ossec-alerts"]
      add_tag => ["ossec-alerts-clone"]
    }
  }
}
