########################
# logstash Configuration Files - Bro IDS Logs
# Created by 505Forensics (http://www.505forensics.com)
# MIT License, so do what you want with it!
#
# For use with logstash, elasticsearch, and kibana to analyze logs
#
# Usage: Reference this config file for your instance of logstash to parse Bro notice logs
#
# Limitations: Standard bro log delimiter is tab.
#
####################### 

filter {

  #Let's get rid of those header lines; they begin with a hash
  if [message] =~ /^#/ {
    drop { }
  }

  mutate {
    add_field => {
      "received_timestamp" => ""
    }
  }
  ruby {
    code => "
      event['received_timestamp'] = Time.now.to_f
    " 
  }

  #Now, using the csv filter, we can define the Bro log fields
  if [type] == "bro-notice" {
    csv {

      #notice.log:#fields	ts	uid	id.orig_h	id.orig_p	id.resp_h	id.resp_p	fuid	file_mime_type	file_desc	proto	note	msg	sub	src	dst	p	n	peer_descr	actions	suppress_for	dropped	remote_location.country_code	remote_location.region	remote_location.city	remote_location.latitude	remote_location.longitude
      columns => ["ts","uid","id.orig_h","id.orig_p","id.resp_h","id.resp_p","fuid","file_mime_type","file_desc","proto","note","msg","sub","src","dst","p","n","peer_descr","actions","suppress_for","dropped","remote_location.country_code","remote_location.region","remote_location.city","remote_location.latitude","remote_location.longitude"]

      #If you use a custom delimiter, change the following value in between the quotes to your delimiter. Otherwise, leave the next line alone.
      separator => "	"
    }


    #Let's convert our timestamp into the 'ts' field, so we can use Kibana features natively
    date {
      match => [ "ts", "UNIX" ]
    }

    #add a new epoch_time field for AttackTagger
    ruby {
      code => "
        tstamp = event['@timestamp'].to_f
        received_tstamp = event['received_timestamp'].to_f
        event['epoch_time'] = Time.at(tstamp).strftime('%s.%L')
        event['received_timestamp'] = Time.at(received_tstamp).strftime('%s.%L')
      "
    }
   
    # add geoip attributes
    #geoip {
    #  source => "id.orig_h"
    #  target => "geoip"
    #}
    geoip {
      source => "id.resp_h"
      target => "geoip"
    }

    mutate {
      convert => [ "id.orig_p", "integer" ]
      convert => [ "id.resp_p", "integer" ]
      convert => [ "p", "integer" ]
      convert => [ "n", "integer" ]
      convert => [ "suppress_for", "float" ]

      #Add alert field for AttackTagger
      add_field => {
        "alert" => "%{note}"
        "user" => ""
      }
      add_tag => ["bro-notice"]
    }

    if [id.orig_h] != '-' {
      mutate {
        replace => {
          "host" => "%{id.orig_h}"
        }
      }
    } else {
      mutate {
        replace => {
          "host" => ""
        }
      }
    }

    translate {
      field => "alert"
      regex => true
      destination => "alert_translated"
      fallback => "unknown alert"
      dictionary => [
                     "Scan::(Address_Scan|Port_Scan)" ,"ALERT_INTERNAL_ADDRESS_SCAN",
                     "SSH::Watched_Country_Login" ,"ALERT_WATCHED_COUNTRY_LOGIN",
                     "SSH::Password_Guessing" ,"ALERT_SSH_BRUTEFORCE",
                     "TeamCymruMalwareHashRegistry::Match" ,"ALERT_MALWARE_HASH_REGISTRY_MATCH",
                     "Mime::Mime_Type_Ext_Mismatch" ,"ALERT_INVALID_MIME_EXT",
                     "LargeTrafficChange::(LargeOrigTrafficChange|LargeRespTrafficChange)" ,"ALERT_HIGH_NETWORKFLOWS",
                     "Bad_IRC::BadIRC" ,"WEIRD_IRC_SERVER",
                     "HTTP::WeirdURI" ,"ALERT_WEIRD_URL_NAME",
                     "Intel::ADDR" ,"ALARM_ANOMALOUS_HOST",
                     "Intel::DOMAIN" ,"ALERT_HIGH_RISK_DOMAIN",
                     "Intel::URL" ,"ALERT_MALICIOUS_URL",
                     "SMTP::(SMTP_PossibleSpam|SMTP_StrangeRejectBehavior)" ,"ALERT_HOSTING_HIDDEN_SPAM",

                     #New Events
                     "Mime::(Download_Sensitive_Type|Download_Sensitive_Extension)", "ALERT_DOWNLOAD_SENSITIVE_EXTENSION",
                     "SSH::Interesting_Hostname_Login", "ALERT_ANOMALOUS_SSH_LOGIN"

                     #"" ,"ALARM_COMMAND_ANOMALY"
                     #"" ,"ALERT_ILLEGAL_USER_ACTIVITY"
                     #"" ,"ALERT_MISMATCH_FILE_HOST_DL"
                     #"" ,"ALERT_HTTP_HOST_CLUSTER_CONN"
                     #"" ,"ALERT_REQUEST_ACCESS_RESOURCE"
                     #"" ,"ALERT_PREVIOUSLY_COMPROMISED"
                     #"" ,"ALERT_LOGIN_USING_EXPIRED_ACCOUNT"
      ]
    }

    #create a duplicate for AttackTagger, send the original to ES/kibana
    clone {
      clones => ["bro-notice-clone"]
    }
  }
  if [type] == "bro-notice-clone" {
    mutate{
      remove_tag => ["bro-notice"]
      add_tag => ["bro-notice-clone"]
    }
  }
}
